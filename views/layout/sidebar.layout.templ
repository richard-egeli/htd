package layout

import "github.com/richard-egeli/htd/views/icons"
import "net/http"
import "github.com/richard-egeli/htd/views/components"

type SidebarData struct {
	Name              string
	GenerateCSRFToken func(r *http.Request) string
}

var dashboardButton = components.Data{
	Icon: icons.ChartPieIcon,
	Attributes: templ.Attributes{
		"hx-get":      "/dashboard",
		"hx-swap":     "innerHTML",
		"hx-target":   "#main-content-area",
		"hx-push-url": "/dashboard",
	},
}

var ordersButton = components.Data{
	Icon: icons.ShoppingBagIcon,
	Attributes: templ.Attributes{
		"hx-get":      "/dashboard/orders",
		"hx-swap":     "innerHTML",
		"hx-target":   "#main-content-area",
		"hx-push-url": "/dashboard/orders",
	},
}

var productsButton = components.Data{
	Icon: icons.ClipboardDocumentIcon,
	Attributes: templ.Attributes{
		"hx-get":      "/dashboard/products",
		"hx-swap":     "innerHTML",
		"hx-target":   "#main-content-area",
		"hx-push-url": "/dashboard/products",
	},
}

var settingsButton = components.Data{
	Icon: icons.CogIcon,
	Attributes: templ.Attributes{
		"hx-get":      "/dashboard/settings",
		"hx-swap":     "innerHTML",
		"hx-target":   "#main-content-area",
		"hx-push-url": "/dashboard/settings",
	},
}

var logoutButton = components.Data{
	Icon: icons.PowerIcon,
	Attributes: templ.Attributes{
		"hx-post":     "/logout",
		"hx-swap":     "outerHTML",
		"hx-target":   "body",
		"hx-push-url": "true",
	},
}

css styles() {
	color: #0000FF;
}

templ iconButton(data *components.Data) {
	<button
		class={
			data.Class,
			"sidebar-button flex w-full justify-start gap-6 text-gray-500 focus:text-blue-500 hover:text-blue-500 px-4 py-2",
			"border-b-2 border-transparent focus:border-b-2 focus:border-blue-500 outline-none",
		}
		{ data.Attributes... }
	>
		@data.Icon()
		<span>
			{ children... }
		</span>
	</button>
}

templ SidebarLayout(w http.ResponseWriter, r *http.Request, data *SidebarData) {
	if r.Header.Get("HX-Request") != "true" {
		@BaseLayout(data.GenerateCSRFToken(r), "Dashboard Page") {
			<div class="flex flex-col h-screen">
				<header class="h-16 w-full flex flex-shrink-0 bg-indigo-600 text-gray-300 fixed">
					<div class="bg-indigo-700 w-64 h-full flex justify-center items-center text-white font-semibold">Content Management System</div>
					<div class="flex flex-1 h-full justify-between px-4">
						<div class="flex justify-center items-center py-4 gap-2">
							<button class="h-full p-2 flex justify-center items-center">
								@icons.ArrowLeftCircleIcon()
							</button>
							<div class="flex justify-center items-center gap-2 border-b border-gray-400 py-2 px-2">
								@icons.MagnifyingGlass()
								<input class="bg-transparent text-white outline-none text-sm" placeholder="Find projects or clients"/>
							</div>
						</div>
						<div class="flex justify-center items-center gap-2">
							<button class="p-2 flex justify-center items-center">
								@icons.BellIcon()
							</button>
							<div class="w-[1px] h-5/6 bg-gray-300 bg-opacity-20"></div>
							<button class="p-2 flex justify-center items-center">
								@icons.EnvelopeIcon()
							</button>
							<div class="w-[1px] h-5/6 bg-gray-300 bg-opacity-20"></div>
							<button class="p-2 flex justify-center items-center">
								@icons.QuestionMarkCircleIcon()
							</button>
						</div>
					</div>
				</header>
				<main class="flex flex-1 mt-16">
					<div class="w-64 text-gray flex flex-col justify-between bg-white border-r border-gray fixed" style="height: calc(100vh - 4rem);">
						<div class="flex flex-col justify-start items-center">
							<div class="px-10 pt-10">
								<img src="/static/bird.webp" alt="Profile picture for user" class="rounded-full"/>
							</div>
							<h1 class="text-xl font-semibold p-5 text-indigo-600">Passerina Cyanea</h1>
							<ul class="w-max flex flex-col gap-1">
								@iconButton(&dashboardButton) {
									Dashboard
								}
								@iconButton(&ordersButton) {
									Orders
								}
								@iconButton(&productsButton) {
									Products
								}
								@iconButton(&settingsButton) {
									Settings
								}
								@iconButton(&logoutButton) {
									Logout
								}
							</ul>
						</div>
						<div class="">
							@icons.RingsIcon()
						</div>
					</div>
					<div class="overflow-auto flex-1 p-10 bg-gray-100 ml-64" id="main-content-area">
						{ children... }
					</div>
				</main>
			</div>
		}
	} else {
		{ children... }
	}
}
